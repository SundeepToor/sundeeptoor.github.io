<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Working with Arrays 1</title>
</head>
<body>
  <p><em>Open up the JavaScript Console to see</em></p>
  <script>

    // Some data we can work with

    const inventors = [
      { first: 'Albert', last: 'Einstein', year: 1879, passed: 1955 },
      { first: 'Isaac', last: 'Newton', year: 1643, passed: 1727 },
      { first: 'Galileo', last: 'Galilei', year: 1564, passed: 1642 },
      { first: 'Marie', last: 'Curie', year: 1867, passed: 1934 },
      { first: 'Johannes', last: 'Kepler', year: 1571, passed: 1630 },
      { first: 'Nicolaus', last: 'Copernicus', year: 1473, passed: 1543 },
      { first: 'Max', last: 'Planck', year: 1858, passed: 1947 },
      { first: 'Katherine', last: 'Blodgett', year: 1898, passed: 1979 },
      { first: 'Ada', last: 'Lovelace', year: 1815, passed: 1852 },
      { first: 'Sarah E.', last: 'Goode', year: 1855, passed: 1905 },
      { first: 'Lise', last: 'Meitner', year: 1878, passed: 1968 },
      { first: 'Hanna', last: 'HammarstrÃ¶m', year: 1829, passed: 1909 }
    ];

    const people = ['Beck, Glenn', 'Becker, Carl', 'Beckett, Samuel', 'Beddoes, Mick', 'Beecher, Henry', 'Beethoven, Ludwig', 'Begin, Menachem', 'Belloc, Hilaire', 'Bellow, Saul', 'Benchley, Robert', 'Benenson, Peter', 'Ben-Gurion, David', 'Benjamin, Walter', 'Benn, Tony', 'Bennington, Chester', 'Benson, Leana', 'Bent, Silas', 'Bentsen, Lloyd', 'Berger, Ric', 'Bergman, Ingmar', 'Berio, Luciano', 'Berle, Milton', 'Berlin, Irving', 'Berne, Eric', 'Bernhard, Sandra', 'Berra, Yogi', 'Berry, Halle', 'Berry, Wendell', 'Bethea, Erin', 'Bevan, Aneurin', 'Bevel, Ken', 'Biden, Joseph', 'Bierce, Ambrose', 'Biko, Steve', 'Billings, Josh', 'Biondo, Frank', 'Birrell, Augustine', 'Black, Elk', 'Blair, Robert', 'Blair, Tony', 'Blake, William'];

    // Array.prototype.filter()
    // 1. Filter the list of inventors for those who were born in the 1500's
    const fifteen = inventors.filter(function(inventor) {
    	if(inventor.year >= 1500 && inventor.year < 1600) {
    		return true; //keep this value
    	}
    });
    console.table(fifteen); //returns values neatly in table

    //Reduced function turn into arrow function and all inline
    const fifteenv2 = inventors.filter(inventor => (inventor.year >= 1500 && inventor.year < 1600))
    console.table(fifteenv2);


    // Array.prototype.map()
    // 2. Give us an array of the inventors' first and last names
    //map takes in an array, does something with it, and returns a new array
    //map will return same number of items as you give it
    const fullNames = inventors.map(inventor => inventor.first + ' ' + inventor.last);
    console.log(fullNames);

    // Array.prototype.sort()
    // 3. Sort the inventors by birthdate, oldest to youngest
    //sort will take two items and compare the two and add values to them
    const ordered = inventors.sort(function(a, b) {
    	if(a.year > b.year) {
    		return 1;
    	} else {
    	  return -1;
    	}
    });

    console.table(ordered);

    //reduce down using ternary operator
    const orderedv2 = inventors.sort((a, b) => a.year > b.year ? 1 : -1);
    console.table(orderedv2);

    // Array.prototype.reduce()
    // 4. How many years did all the inventors live?
    //reduce will allow us to build onto the array
    const totalYears = inventors.reduce((total, inventor) => {
    	return total + (inventor.passed - inventor.year);
    }, 0); 
    //0 is the original number total starts with before adding the years
    console.log(totalYears);

    // 5. Sort the inventors by years lived
    const orderedAge = inventors.sort(function(a, b){
    	const lastGuy = a.passed - a.year;
    	const nextGuy = b.passed - b.year;
    	if(lastGuy > nextGuy) {
    		return -1;
    	} else {
    		return 1;
    	}
    });
    console.table(orderedAge);

    //more concise
    const orderedAge2 = inventors.sort(function(a, b){
    	const lastGuy = a.passed - a.year;
    	const nextGuy = b.passed - b.year;
    	return lastGuy > nextGuy ? -1 : 1;
    });
    console.table(orderedAge2);

    // 6. create a list of Boulevards in Paris that contain 'de' anywhere in the name
    // https://en.wikipedia.org/wiki/Category:Boulevards_in_Paris

    //inspect page to find what contains the list of boulevards
  //  const category = document.querySelector('.mw-category');
  //  const links = Array.from(category.querySelectorAll('a'));//search links within mw-category, turns them into an array, not node list
 //   const de = links
 //   			.map(link => link.textContent)//convert list of links into names
 //   			.filter(streetName => streetName.includes('de')); //filters

    // 7. sort Exercise
    // Sort the people alphabetically by last name
    const alpha = people.sort((lastOne, nextOne) => {
    	const [aLast, aFirst] = lastOne.split(', ');
    	const [bLast, bFirst] = nextOne.split(', ');
    	return aLast > bLast ? 1 : -1;
    });
    console.log(alpha);

    // 8. Reduce Exercise
    // Sum up the instances of each of these
    const data = ['car', 'car', 'truck', 'truck', 'bike', 'walk', 'car', 'van', 'bike', 'walk', 'car', 'van', 'car', 'truck' ];
    // we want a tally of each type of transport
    const transportation = data.reduce(function(obj, item) {
    	if (!obj[item]){ //if there are no items currently in the object . . 
    		obj[item] = 0; //. . the object item equals 0
    	}
    	obj[item]++; //counts items up
    	return obj; //returns object values
    }, {});//start with a blank object that has items added to it

    console.log(transportation);

  </script>
</body>
</html>
